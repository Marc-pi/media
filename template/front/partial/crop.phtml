<?php
    $this->css($this->assetModule('css/cropper.min.css', 'media'));
    $this->js($this->assetModule('js/cropper.min.js', 'media'));

    $currentModule = Pi::service('module')->current();

    if($currentModule == 'event'){
        $currentModule = 'news';
    }

    $currentConfig = Pi::service('registry')->config->read($currentModule);

    $currentMinCropRealWidth = !empty($currentConfig['image_largew']) ? (int) $currentConfig['image_largew'] : null;
    $currentMinCropRealHeight = !empty($currentConfig['image_largeh']) ? (int) $currentConfig['image_largeh'] : null;

    $config = Pi::service('registry')->config->read($module);

    $ajaxCroppingUpdateUrl = Pi::url($this->url('', array(
        'controller' => $controller,
        'action' => 'updatecrop',
            'id' => 'ID_VALUE'
    ))) . '?cropping=CROPPING_VALUE';

    $minCropRealWidth = $currentMinCropRealWidth ?: (int) $config['image_largew'];
    $minCropRealHeight = $currentMinCropRealHeight ?: (int) $config['image_largeh'];

    $ratio = Pi::api('doc', 'media')->getRatio();
?>
<script>
    var ajaxCroppingUpdateUrl = '<?php echo $ajaxCroppingUpdateUrl ?>';
    var minCropRealWidth = <?php echo $minCropRealWidth ?>;
    var minCropRealHeight = <?php echo $minCropRealHeight ?>;
    var warningMinWidthAlertText = "<?php echo __("Notice : min width has been reached") ?>";
    var ratio = <?php echo $ratio ?>;

    function initCrop(element, croppingInputElement){
        var targetElement = element.get(0);
        var targetElementWidth = element.outerWidth();
        var targetElementHeight = element.outerHeight();

        if(jQuery('#editMediaModal').find(targetElement).length > 0){
            jQuery(targetElement).parent().after(function() {
                return '<div class="cropping-data">' +
                    '<small>Width : <span class="width"></span>px, Height : <span class="height"></span>, OffsetX : <span class="x"></span>, OffsetY : <span class="y"></span></small>' +
                    '</div><div><small class="cropping-data-warning"></small></div>';
            });
        }

        targetElement.addEventListener('ready', function () {
            var currentCropValue= croppingInputElement.val();
            var currentCrop = null;

            this.cropper.crop();

            if(currentCropValue){
                currentCrop = JSON.parse(currentCropValue);
                this.cropper.setData(currentCrop);
                updateCropDataView(currentCrop)
            }
            else {
                updateCropValue(this.cropper, croppingInputElement, true);
            }
        });

        targetElement.addEventListener('cropend', function () {
            updateCropValue(this.cropper, croppingInputElement, true);
        });

        var minCropWidth = minCropRealWidth * targetElementWidth / targetElement.naturalWidth;
        var minCropHeight = minCropRealHeight * targetElementHeight / targetElement.naturalHeight;

        cropper = new Cropper(targetElement, {
            minContainerWidth: 180,
            aspectRatio: ratio,
            viewMode: 1,
            rotatable: false,
            responsive: false,
            minCropBoxWidth: minCropWidth,
            minCropBoxHeight: minCropHeight,
            autoCrop: false,
            zoomable: false,
            autoCropArea : 1,
            toggleDragModeOnDblclick: false
        });

        return cropper;
    }

    function updateCropDataView(currentCrop){
        var croppingData = jQuery('.cropping-data');
        var warningElement = jQuery('.cropping-data-warning');

        if(croppingData.length){
            croppingData.find('.width').html(currentCrop.width);
            croppingData.find('.height').html(currentCrop.height);
            croppingData.find('.x').html(currentCrop.x);
            croppingData.find('.y').html(currentCrop.y);

            if(currentCrop.width <= <?php echo $minCropRealWidth ?>){
                warningElement.html(warningMinWidthAlertText);
            }else {
                warningElement.html('');
            }
        }
    }

    function updateCropValue(cropper, croppingInputElement, triggerchange){
        var cropperData = cropper.getData(true);
        var cropData = JSON.stringify(cropperData);
        croppingInputElement.val(cropData);

        if(triggerchange){
            croppingInputElement.change();
        }

        updateCropDataView(cropperData)
    }

    function parseCrop(){
        var formgroupPreview = $('.form-group[data-name="imageview"]');

        $('.imageview').each(function(){
            var imageView = $(this);
            var currentSrc = imageView.attr('src').trim();

            if(imageView.prop("tagName") == 'INPUT' && imageView.attr('type') == 'image'){
                var id = imageView.attr('id');
                imageView.replaceWith('<div><img id="' + id + '" class="imageview img-thumbnail item-img" data-rel="' + imageView.data('rel') + '" style="max-width:100%;" src="'+currentSrc+'"></div>');
            }
        });

        $('input[name="file"]').change(function(){
            var reader  = new FileReader();

            $('input[name="cropping"]').val('').change();

            reader.addEventListener("load", function () {
                $('#imageview_0').attr('src', reader.result);
            }, false);

            var file = $(this).prop('files')[0];

            if (file) {
                formgroupPreview.show();
                reader.readAsDataURL(file);
            }
        });


        var imageViewCollection = $('.imageview').not('.cropped');


        imageViewCollection.each(function(){

            var imageView = $(this);
            var currentSrc = imageView.attr('src').trim();

            imageView.addClass('cropped');
            imageView.not('.attachement').parent().parent().removeClass('col-sm-5').addClass('col-sm-9').next().remove();
            imageView.parent().width(imageView.parent().parent().width());

            if(!currentSrc){
                formgroupPreview.hide();
            }

            $(this).on('load', function() {
                var imageView = $(this);
                var cropper = imageView.data('cropper');
                var currentSrc = imageView.attr('src').trim();
                var croppingInputElement = $('input[name="'+ imageView.data('rel') +'"]');


                if (typeof cropper != 'undefined') {
                    cropper.destroy();
                }

                if(croppingInputElement.hasClass('ajaxUpdate')){
                    croppingInputElement.on('change', function(){
                        var croppingValue = $(this).val();
                        var idValue = $(this).data('id');
                        var urlUpdate = ajaxCroppingUpdateUrl;

                        urlUpdate = urlUpdate.replace('ID_VALUE', idValue);
                        urlUpdate = urlUpdate.replace('CROPPING_VALUE', encodeURI(croppingValue));

                        $.get(urlUpdate, function( data ) {
                        });
                    });
                }

                if(currentSrc) {
                    imageView.data('cropper', initCrop(imageView, croppingInputElement));
                }
            });
        });
    }
</script>